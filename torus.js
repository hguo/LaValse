const mira = require("./mira");

function parseTorusCoords(str) {
  return {
    a: parseInt(str[0], 16), 
    b: parseInt(str[1], 16), 
    c: parseInt(str[2], 16),
    d: parseInt(str[3], 16),
    e: parseInt(str[4], 16)
  }
}

function torusCoordsToStr(a, b, c, d, e) {
  return (a.toString(16) + b.toString(16) + c.toString(16) + d.toString(16) + e.toString(16)).toUpperCase();
}

function torusCoordsToRMNJ(A, B, C, D, E) {
}

function computeCardToNodeBoardLocalTorusCoords(N, J) {
  const array = [
    ["00000", "00100", "01100", "01000", "01001", "01101", "00101", "00001", "01011", "01111", "00111", "00011", "00010", "00110", "01110", "01010", "10110", "10010", "11010", "11110", "11111", "11011", "10011", "10111", "11101", "11001", "10001", "10101", "10100", "10000", "11000", "11100"],
    ["00100", "00000", "01000", "01100", "01101", "01001", "00001", "00101", "01111", "01011", "00011", "00111", "00110", "00010", "01010", "01110", "10010", "10110", "11110", "11010", "11011", "11111", "10111", "10011", "11001", "11101", "10101", "10001", "10000", "10100", "11100", "11000"],
    ["00010", "00110", "01110", "01010", "01011", "01111", "00111", "00011", "01001", "01101", "00101", "00001", "00000", "00100", "01100", "01000", "10100", "10000", "11000", "11100", "11101", "11001", "10001", "10101", "11111", "11011", "10011", "10111", "10110", "10010", "11010", "11110"],
    ["00110", "00010", "01010", "01110", "01111", "01011", "00011", "00111", "01101", "01001", "00001", "00101", "00100", "00000", "01000", "01100", "10000", "10100", "11100", "11000", "11001", "11101", "10101", "10001", "11011", "11111", "10111", "10011", "10010", "10110", "11110", "11010"],
    ["10000", "10100", "11100", "11000", "11001", "11101", "10101", "10001", "11011", "11111", "10111", "10011", "10010", "10110", "11110", "11010", "00110", "00010", "01010", "01110", "01111", "01011", "00011", "00111", "01101", "01001", "00001", "00101", "00100", "00000", "01000", "01100"],
    ["10100", "10000", "11000", "11100", "11101", "11001", "10001", "10101", "11111", "11011", "10011", "10111", "10110", "10010", "11010", "11110", "00010", "00110", "01110", "01010", "01011", "01111", "00111", "00011", "01001", "01101", "00101", "00001", "00000", "00100", "01100", "01000"],
    ["10010", "10110", "11110", "11010", "11011", "11111", "10111", "10011", "11001", "11101", "10101", "10001", "10000", "10100", "11100", "11000", "00100", "00000", "01000", "01100", "01101", "01001", "00001", "00101", "01111", "01011", "00011", "00111", "00110", "00010", "01010", "01110"],
    ["10110", "10010", "11010", "11110", "11111", "11011", "10011", "10111", "11101", "11001", "10001", "10101", "10100", "10000", "11000", "11100", "00000", "00100", "01100", "01000", "01001", "01101", "00101", "00001", "01011", "01111", "00111", "00011", "00010", "00110", "01110", "01010"],
    ["01001", "01101", "00101", "00001", "00000", "00100", "01100", "01000", "00010", "00110", "01110", "01010", "01011", "01111", "00111", "00011", "11111", "11011", "10011", "10111", "10110", "10010", "11010", "11110", "10100", "10000", "11000", "11100", "11101", "11001", "10001", "10101"],
    ["01101", "01001", "00001", "00101", "00100", "00000", "01000", "01100", "00110", "00010", "01010", "01110", "01111", "01011", "00011", "00111", "11011", "11111", "10111", "10011", "10010", "10110", "11110", "11010", "10000", "10100", "11100", "11000", "11001", "11101", "10101", "10001"],
    ["01011", "01111", "00111", "00011", "00010", "00110", "01110", "01010", "00000", "00100", "01100", "01000", "01001", "01101", "00101", "00001", "11101", "11001", "10001", "10101", "10100", "10000", "11000", "11100", "10110", "10010", "11010", "11110", "11111", "11011", "10011", "10111"],
    ["01111", "01011", "00011", "00111", "00110", "00010", "01010", "01110", "00100", "00000", "01000", "01100", "01101", "01001", "00001", "00101", "11001", "11101", "10101", "10001", "10000", "10100", "11100", "11000", "10010", "10110", "11110", "11010", "11011", "11111", "10111", "10011"],
    ["11001", "11101", "10101", "10001", "10000", "10100", "11100", "11000", "10010", "10110", "11110", "11010", "11011", "11111", "10111", "10011", "01111", "01011", "00011", "00111", "00110", "00010", "01010", "01110", "00100", "00000", "01000", "01100", "01101", "01001", "00001", "00101"],
    ["11101", "11001", "10001", "10101", "10100", "10000", "11000", "11100", "10110", "10010", "11010", "11110", "11111", "11011", "10011", "10111", "01011", "01111", "00111", "00011", "00010", "00110", "01110", "01010", "00000", "00100", "01100", "01000", "01001", "01101", "00101", "00001"],
    ["11011", "11111", "10111", "10011", "10010", "10110", "11110", "11010", "10000", "10100", "11100", "11000", "11001", "11101", "10101", "10001", "01101", "01001", "00001", "00101", "00100", "00000", "01000", "01100", "00110", "00010", "01010", "01110", "01111", "01011", "00011", "00111"],
    ["11111", "11011", "10011", "10111", "10110", "10010", "11010", "11110", "10100", "10000", "11000", "11100", "11101", "11001", "10001", "10101", "01001", "01101", "00101", "00001", "00000", "00100", "01100", "01000", "00010", "00110", "01110", "01010", "01011", "01111", "00111", "00011"]
  ];

  return array[N][J];
}

function computeCardToMidplaneLocalTorusCoords(N, J) {
  const offsets = ["00000", "00200", "00020", "00220", "20000", "20200", "20020", "20220", "02000", "02200", "02020", "02220", "22000", "22200", "22020", "22220"];
  var offset = offsets[N];
  var str = computeCardToNodeBoardLocalTorusCoords(N, J);
  var str1 = "";

  for (var i=0; i<str.length; i++) {
    var c = +str[i] + +offset[i];
    str1 += c.toString(16).toUpperCase();
  }

  return str1;
}

var midplaneTorusCoordsMap = {};
for (var N=0; N<16; N++) {
  for (var J=0; J<32; J++) {
    var str = computeCardToMidplaneLocalTorusCoords(N, J);
    midplaneTorusCoordsMap[str] = {N: N, J: J};
  }
}

function midplaneTorusCoordsToNJ(a, b, c, d, e) {
  var key = torusCoordsToStr(a, b, c, d, e);
  return midplaneTorusCoordsMap[key];
}

function globalTorusCoordsToRM(x, y, z, w) {
  return {
    row: Math.floor(y/4), 
    column: 8*Math.floor(x/4) + f(Math.floor(z/4), Math.floor(w/4)), 
    midplane: C(Math.floor(w/4))
  }

  function f(a1, a2) {return H(a1) + Q(a2);}
  function H(z_4) {const table = [0, 4, 6, 2]; return table[z_4];}
  function Q(w_4) {return w_4<=1 ? 0 : 1;}
  function C(w_4) {const table = [0, 1, 1, 0]; return table[w_4];}
}

function globalTorusCoordsToRMNJ(A, B, C, D, E) {
  var RM = globalTorusCoordsToRM(A, B, C, D);
  var a = A%4, b = B%4, c = C%4, d = D%4, e = E;
  var NJ = midplaneTorusCoordsToNJ(a, b, c, d, e);
  return {
    row: RM.row, 
    column: RM.column, 
    midplane: RM.midplane, 
    nodeBoard: NJ.N, 
    computeCard: NJ.J
  };
}

for (var a=0; a<8; a++) {
  for (var b=0; b<12; b++) {
    for (var c=0; c<16; c++) {
      for (var d=0; d<16; d++) {
        for (var e=0; e<2; e++) {
          var key = torusCoordsToStr(a, b, c, d, e);
          var loc = globalTorusCoordsToRMNJ(a, b, c, d, e);
          var str = mira.computeCard2str(loc.row, loc.column, loc.midplane, loc.nodeBoard, loc.computeCard);
          console.log(key, str);
        }
      }
    }
  }
}

